/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/submissions': {
    /** See `/submissions/{submissionId}` for notes about submission properties. */
    get: {
      parameters: {
        query: {
          /** Filter results by one or more submission statuses. Must match the value of one of the `PKPSubmission::STATUS_QUEUED`, `PKPSubmission::STATUS_SCHEDULED`, `PKPSubmission::STATUS_PUBLISHED` or `PKPSubmission::STATUS_DECLINED` constants. */
          status?: (1 | 3 | 4 | 5)[]
          /** Filter results by those assigned to one or more user ids. All users except managers and admins are automatically restricted to assigned submissions and do not need to pass this parameter. */
          assignedTo?: number[]
          /** How many results to return in a single request. Max is `100`. */
          count?: number
          /** Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`. */
          offset?: number
          /** Order the results returned. */
          orderBy?:
            | 'datePublished'
            | 'dateSubmitted'
            | 'lastActivity'
            | 'lastModified'
            | 'sequence'
            | 'title'
          /** Return the results in ascending or descending order. */
          orderDirection?: 'ASC' | 'DESC'
          /** Filter the results by those for which the author has not yet completed the submission process. */
          isIncomplete?: boolean
          /** Filter the results by those for which a reviewer has missed a deadline. */
          isOverdue?: boolean
          /** Filter the results by those which have not had activity for the last X days. */
          daysInactive?: number
          /** Filter the results by those with one or more publications assigned to a section. */
          sectionIds?: number[]
          /** Filter the results by those with one or more publications assigned to an issue. */
          issueIds?: number[]
          /** Filter the results by a search phrase matched against the title and authors. */
          searchPhrase?: string
        }
      }
      responses: {
        /** List of requested submissions. */
        200: {
          schema: {
            itemsMax?: number
            items?: definitions['SubmissionSummary'][]
          }
        }
        /** You do not have permission to access submissions assigned to the user requested in the `assignedTo` parameter. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    post: {
      parameters: {}
      responses: {
        /** Details of the submission that was just added. */
        200: {
          schema: definitions['Submission']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}': {
    /**
     * * Unpublished submissions are only returned for assigned participants, editors and admins.
     * * `abstract` includes HTML markup.
     * * `pages` is usually a `string`. But in some cases it may return an array of arrays. Each array contains two items: the start and end page. Example: `[[25, 31], [45, 62]]`.
     * * `submissionProgress` will be > 0 if the submission is incomplete.
     * * `stages`, `reviewRounds` and `reviewAssignments` should only be returned for participants assigned to the submission.
     * * `reviewAssignments` should only expose user-identifying information for editors and admins.
     */
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
        }
      }
      responses: {
        /** The submission details. */
        200: {
          schema: definitions['Submission']
        }
        /** You do not have permission to access this submissions. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The submission could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    put: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
        }
      }
      responses: {
        /** The submission that was just edited with the new values after the update has occurred. */
        200: {
          schema: definitions['Submission']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /**
         * This error indicates one of the following:
         * * You are not allowed to edit a submission from the site-wide endpoint. You must use a context (journal/press/server) endpoint.
         * * You are not allowed to change the context (journal/press/server) of a submission.
         */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The submission could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Only journal managers and subeditors can make a request to this endpoint. */
    delete: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
        }
      }
      responses: {
        /** Details of the deleted submission. */
        200: {
          schema: definitions['Submission']
        }
        /** You are not allowed to delete this submission. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The submission could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/files': {
    /**
     * This will return all of a submission's files that the user is allowed to access, except review attachments and discussion files. A user is allowed to access different file stages depending on their stage assignment.
     * * Managers, subeditors and assistants can access all file stages if they are assigned to the matching workflow stage. For example, an assistant assigned to the copyediting stage can access files in `SUBMISSION_FILE_COPYEDIT` and `SUBMISSION_FILE_FINAL`.
     * * Authors are restricted to the `SUBMISSION_FILE_SUBMISSION`, `SUBMISSION_FILE_REVIEW_REVISION`, `SUBMISSION_FILE_COPYEDIT` and `SUBMISSION_FILE_PROOF` file stages. For example, an author with access to the copyediting stage will have access to `SUBMISSION_FILE_COPYEDIT` (copyedited files) but not `SUBMISSION_FILE_FINAL` (draft files).
     * * Reviewers and readers are not allowed to access this endpoint.
     * * Managers who are not assigned to the submission are allowed to access all file stages as though they are assigned to every workflow stage.
     */
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
        }
        query: {
          /** Filter results by those submission files assigned to one or more file stage. One of the `SUBMISSION_FILE_` constants. */
          fileStages?: number[]
          /** Filter results by those submission files assigned to one or more review rounds. */
          reviewRoundIds?: number[]
        }
      }
      responses: {
        /** An array of the requested submission files. */
        200: {
          schema: definitions['SubmissionFileSummary'][]
        }
        /**
         * You do not have permission to view the requested files.
         *
         * |Error Code|Description|
         * |---|---|
         * |`api.403.unauthorized`|You are not allowed to access files for this submission.|
         * |`api.submissionFiles.403.unauthorizedFileStageId`|You are not allowed to access files in one or more of the `fileStages` requested.|
         * |`api.submissionFiles.403.unauthorizedReviewRound`|You are not allowed to access files in one or more of the `reviewRoundIds` requested.
         */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** A user is allowed to upload to different file stages depending on their stage assignments. See the description for `GET /submission/{submissionId}/files` above. Once a submission has been completed, authors are no longer allowed to upload to `SUBMISSION_FILE_SUBMISSION`. Authors are not allowed to upload to `SUBMISSION_FILE_REVIEW_REVISION` until revisions have been requested. */
    post: {
      parameters: {}
      responses: {
        /** The new submission file. */
        200: {
          schema: definitions['SubmissionFile']
        }
        /** There was an error when uploading the file or the values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** You are not allowed to upload a file to the specified file stage of this submission. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/files/{submissionFileId}': {
    /** You must pass the correct `stageId` when requesting a file. */
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Submission File ID */
          submissionFileId: number
        }
        query: {
          /** The workflow stage id of the requested file. For example, `WORKFLOW_STAGE_ID_PRODUCTION`. */
          stageId: number
        }
      }
      responses: {
        /** Details of the submission file. */
        200: {
          schema: definitions['SubmissionFile']
        }
        /** You are not allowed to access the requested file. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** You must pass the correct `stageId` when editing a file. */
    put: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Submission File ID */
          submissionFileId: number
        }
        query: {
          /** The workflow stage id of the file to be edited. For example, `WORKFLOW_STAGE_ID_PRODUCTION`. */
          stageId: number
        }
      }
      responses: {
        /** The submission file that was just edited with the new values after the update has occurred. */
        200: {
          schema: definitions['SubmissionFile']
        }
        /** There was an error when uploading the file or the values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** You are not allowed to edit the requested file. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** You must pass the correct `stageId` when deleting a file. */
    delete: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Submission File ID */
          submissionFileId: number
        }
        query: {
          /** The workflow stage id of the file to be edited. For example, `WORKFLOW_STAGE_ID_PRODUCTION`. */
          stageId: number
        }
      }
      responses: {
        /** The submission file that was just deleted. */
        200: {
          schema: definitions['SubmissionFile']
        }
        /** You are not allowed to delete the requested file. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/participants': {
    /** Get the participants assigned to a submisssion. */
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
        }
      }
      responses: {
        /** List of users assigned to a submission */
        200: {
          schema: definitions['UserSummary'][]
        }
        /** The requested submission could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/participants/{stageId}': {
    /** Get all participants assigned to a submission for a specific workflow stage, such as the review or copyediting stage. */
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Stage ID */
          stageId: number
        }
      }
      responses: {
        /** List of users assigned to the requested stage of the requested submission */
        200: {
          schema: definitions['UserSummary'][]
        }
        /** The requested submission could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications': {
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
        }
      }
      responses: {
        /** List of publications for this submission. */
        200: {
          schema: definitions['Publication'][]
        }
        /** The requested submission could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Create a new publication for a submission. */
    post: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** Details of the publication that was just added. */
        200: {
          schema: definitions['Publication']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications/{publicationId}': {
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** The publication details */
        200: {
          schema: definitions['Publication']
        }
        /** The requested submission or publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    put: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** The publication that was just edited with the new values after the update has occurred. */
        200: {
          schema: definitions['Publication']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /**
         * This error indicates one of the following:
         * * The publication you want to edit does not belong to this submission.
         * * This publication is published and can not be edited. You must create and publish a new version.
         * * You do not have permission to edit this publication.
         * * You are not allowed to modify the `status` of a publication. You must use the `/submissions/{submissionId}/publications/{publicationId}/publish` and `.../unpublish` endpoints to modify the status of a publication.
         */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Only journal managers and subeditors can make a request to this endpoint. */
    delete: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** The publication that was just deleted. */
        200: {
          schema: definitions['Publication']
        }
        /**
         * This may mean one of the following:
         * * You are not allowed to delete this publication.
         * * The publication does not belong to this submission.
         * * This publication is published and can not be deleted.
         */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The submission could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications/{publicationId}/version': {
    /** Duplicate a publication, including author and galley records, in order to create a new version of a publication that can be edited. */
    post: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** Details of the new publication that was created. */
        200: {
          schema: definitions['Publication']
        }
        /** The publication you want to version does not belong to this submission. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications/{publicationId}/publish': {
    /**
     * If the publication is assigned to an issue that is not yet published, it will be scheduled for publication and the `status` will be set to `PKPSubmission::STATUS_SCHEDULED`. If the issue is already published, it will be published immediately and the `status` will be set to `PKPSubmission::STATUS_PUBLISHED`.
     *
     * The publication will be validated against any publishing requirements before it is published and a `400` response will be returned if it fails validation.
     */
    put: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** Details of the publication that was just published. */
        200: {
          schema: definitions['Publication']
        }
        /** One or more publication requirements have not been met. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** A 403 response means that the publication you want to version does not belong to this submission or that the publication is already published. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications/{publicationId}/unpublish': {
    put: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** Details of the publication that was just unpublished. */
        200: {
          schema: definitions['Publication']
        }
        /** A 403 response means that the publication you want to version does not belong to this submission or that the publication is already unpublished. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications/{publicationId}/contributors': {
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** List of contributors for this publication. */
        200: {
          schema: definitions['Contributor'][]
        }
        /** The requested publication is not part of the requested submission. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Create a new contributor for a publication. */
    post: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** Details of the contributor that was just added. */
        200: {
          schema: definitions['Contributor']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** The requested publication is not part of the requested submission. It could be also because the publication is not editable by the requested user */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications/{publicationId}/contributors/{contributorId}': {
    get: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
          /** Contributor ID */
          contributorId: number
        }
      }
      responses: {
        /** The contributor details */
        200: {
          schema: definitions['Contributor']
        }
        /** The requested publication is not part of the requested submission. It could be also because the publication is not editable by the requested user */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested submission or publication or author could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    put: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
          /** Contributor ID */
          contributorId: number
        }
      }
      responses: {
        /** The contributor that was just edited with the new values after the update has occurred. */
        200: {
          schema: definitions['Contributor']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /**
         * This error indicates one of the following:
         * * This contributor is assigned to a publication that does not belong to this submission.
         * * This contributor is assigned to a publication that has already been published. You must create a new version of the publication to modify contributor details.
         * * You do not have permission to edit contributors for this publication.
         */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested submission or publication or author could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Only journal managers and subeditors can make a request to this endpoint. */
    delete: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
          /** Contributor ID */
          contributorId: number
        }
      }
      responses: {
        /** The contributor that was just deleted. */
        200: {
          schema: definitions['Contributor']
        }
        /**
         * This may mean one of the following:
         * * You are not allowed to edit the contributors for this publication.
         * * This contributor is assigned to a publication that is not part of the requested submission.
         * * This contributor is assigned to a published publication and can not be edited.
         */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested submission or publication or author could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/submissions/{submissionId}/publications/{publicationId}/contributors/saveOrder': {
    put: {
      parameters: {
        path: {
          /** Submission ID */
          submissionId: number
          /** Publication ID */
          publicationId: number
        }
      }
      responses: {
        /** Details of the publication that it's contributors were just reordered. */
        200: {
          schema: definitions['Publication']
        }
        /**
         * This may mean one of the following:
         * * You are not allowed to edit the contributors for this publication.
         * * This contributor is assigned to a publication that is not part of the requested submission.
         * * This contributor is assigned to a published publication and can not be edited.
         */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The publication could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/issues': {
    /** Results are eordered by `datePublished`. */
    get: {
      parameters: {
        query: {
          /** How many results to return in a single request. Max is `100`. */
          count?: number
          /** Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`. */
          offset?: number
          /** Order the results returned. */
          orderBy?: 'datePublished' | 'lastModified' | 'seq'
          /** Return the results in ascending or descending order. */
          orderDirection?: 'ASC' | 'DESC'
          /** Filter returned issues by those that have been published. Pass a `false` value to return only unpublished issues. Only administrators and journal managers are allowed to access unpublished issues. */
          isPublished?: boolean
          /** Filter returned issues by those in a specific volume. */
          volumes?: string
          /** Filter returned issues by those assigned a specific number. */
          numbers?: string
          /** Filter returned issues by those in a specific year. */
          years?: string
          /** Filter the results by a search phrase matched against the title, description and year. It will also attempt to match search phrases using the localised issue identification. For example, in English a search for `Vol. 1 No. 2 (2018)` will match an issue with a volume of `1`, a number of `2` and a year of `2018`. The precise format differs for each language. */
          searchPhrase?: string
        }
      }
      responses: {
        /** List of issues. */
        200: {
          schema: definitions['IssueSummary'][]
        }
        /** The requested volume, number or year is not valid. */
        400: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/issues/current': {
    get: {
      responses: {
        /** The current issue. */
        200: {
          schema: definitions['Issue']
        }
        /** This journal does not have a current issue. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/issues/{issueId}': {
    /** If the issue has a custom section order, the `seq` property of each `SectionSummary` will reflect the sequence for that issue. */
    get: {
      parameters: {
        path: {
          /** Issue ID */
          issueId: number
        }
      }
      responses: {
        /** The requested issue. */
        200: {
          schema: definitions['Issue']
        }
        /** The requested issue could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/users': {
    get: {
      parameters: {
        query: {
          /** Filter the results by those who have one of these user role IDs. */
          roleIds?: number[]
          /** Filter results by active/disabled users. */
          status?: 'active' | 'disabled' | 'all'
          /** Filter results by those assigned to this submission ID. */
          assignedToSubmission?: number
          /** Filter results by those assigned to this submission stage. Will be ignored if no `assignedToSubmission` parameter exists. */
          assignedToSubmissionStage?: number
          /** Filter the results by those assigned as section editors to this section ID. */
          assignedToSection?: number
          /** How many results to return in a single request. Max is `100`. */
          count?: number
          /** Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`. */
          offset?: number
          /** Order the results returned. */
          orderBy?: 'id' | 'familyName' | 'givenName'
          /** Return the results in ascending or descending order. */
          orderDirection?: 'ASC' | 'DESC'
          /** Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography` and `orcid`. */
          searchPhrase?: string
        }
      }
      responses: {
        /** A list of users. */
        200: {
          schema: {
            itemsMax?: number
            items?: definitions['UserSummary'][]
          }
        }
        /** Only administrators, journal managers and editors are allowed to access users on this site. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/users/{userId}': {
    get: {
      parameters: {
        path: {
          /** User ID */
          userId: number
        }
      }
      responses: {
        /** User details. */
        200: {
          schema: definitions['User']
        }
      }
    }
  }
  '/users/reviewers': {
    get: {
      parameters: {
        query: {
          /** Filter results by active/disabled users. */
          status?: 'active' | 'disabled' | 'all'
          /** Filter results by those who have an average review assignment rating of at least `X` (valid ratings are between `1` and `5`). */
          reviewerRating?: number
          /** Filter results by reviewers for one of the review stages in the workflow. Must be one of `WORKFLOW_STAGE_ID_INTERNAL_REVIEW` or `WORKFLOW_STAGE_ID_EXTERNAL_REVIEW`. In OJS, the review stage is `WORKFLOW_STAGE_ID_EXTERNAL_REVIEW`. */
          reviewStage?: number
          /** Filter results by those who have completed at least `X` reviews. You can also pass a range as a string formatted as `X-X`. */
          reviewsCompleted?: string
          /** Filter results by those who have `X` review assignments currently in progress. You can also pass a range as a string formatted as `X-X`. */
          reviewsActive?: string
          /** Filter results by those who's last review was assigned at least `X` days ago. You can also pass a range as a string formatted as `X-X`. */
          daysSinceLastAssignment?: string
          /** Filter results by those who complete a review assignment within `X` days on average. */
          averageCompletion?: number
          /** How many results to return in a single request. Max is `100`. */
          count?: number
          /** Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`. */
          offset?: number
          /** Order the results returned. */
          orderBy?: 'id' | 'familyName' | 'givenName'
          /** Return the results in ascending or descending order. */
          orderDirection?: 'ASC' | 'DESC'
          /** Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography`, `orcid`, `interests`, and `gossip`. */
          searchPhrase?: string
        }
      }
      responses: {
        /** List of reviewers. */
        200: {
          schema: {
            itemsMax?: number
            items?: definitions['ReviewerSummary'][]
          }
        }
        /** Only administrators, journal managers and editors are allowed to access users on this site. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/contexts': {
    /** Get an array of the journals (OJS), presses (OMP) or preprint servers (OPS) hosted on this site. */
    get: {
      parameters: {
        query: {
          /** Filter results by enabled/disabled contexts. Any truthy or falsey value will get enabled/disabled contexts. Leave this parameter out to get all contexts. */
          isEnabled?: string
          /** How many results to return in a single request. Max is `100`. */
          count?: unknown
          /** Offset the results returned. Use this to receive subsequent pages of requests. */
          offset?: number
          /** Filter results by a search phrase matched against the `name`, `description`, `acronym`, or `abbreviation`. */
          searchPhrase?: string
        }
      }
      responses: {
        /** List of contexts. */
        200: {
          schema: {
            itemsMax?: number
            items?: definitions['ContextSummary'][]
          }
        }
        /** You do not have permission to view disabled contexts. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Create a new journal (OJS), press (OMP) or preprint server (OPS). */
    post: {
      parameters: {}
      responses: {
        /** Details of the context that was just added. */
        200: {
          schema: definitions['Context']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  '/contexts/{contextId}': {
    get: {
      parameters: {
        path: {
          /** Context ID */
          contextId: number
        }
      }
      responses: {
        /** Context details. Some details may be withheld if you are not a site admin or manager of that context. */
        200: {
          schema: definitions['Context']
        }
        /** You do not have permission to view this context. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested context could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Edit a journal (OJS), press (OMP) or preprint server (OPS). */
    put: {
      parameters: {
        path: {
          /** Context ID */
          contextId: number
        }
      }
      responses: {
        /** The context that was just edited with the current values after the edit has occurred. */
        200: {
          schema: definitions['Context']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested context could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Delete a journal (OJS), press (OMP) or preprint server (OPS). */
    delete: {
      parameters: {
        path: {
          /** Context ID */
          contextId: number
        }
      }
      responses: {
        /** Details of the context that was just deleted. */
        200: {
          schema: definitions['Context']
        }
        /** You do not have permission to delete this context. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested context could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Get the active theme and theme options for any journal (OJS), press (OMP) or preprint server (OPS). */
  '/contexts/{contextId}/theme': {
    /** Get the active theme and theme options for any journal (OJS), press (OMP) or preprint server (OPS). */
    get: {
      parameters: {
        path: {
          /** Context ID */
          contextId: number
        }
      }
      responses: {
        /** The response will include the theme plugin directory in `themePluginPath`. Any theme options will be provided in additional keys based on the option name. */
        200: {
          schema: definitions['ThemeOptions']
        }
        /** You do not have permission to view this context. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested context could not be found. A 404 may also be returned when a context has no active theme, or the active theme plugin has not been installed or enabled. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Edit the active theme and theme options for any journal (OJS), press (OMP) or preprint server (OPS). */
    put: {
      parameters: {
        path: {
          /** Context ID */
          contextId: number
        }
      }
      responses: {
        /** The new theme and values for any of its theme options. */
        200: {
          schema: definitions['ThemeOptions']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested context could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/site': {
    get: {
      responses: {
        /** Site settings. */
        200: {
          schema: definitions['Site']
        }
      }
    }
    put: {
      parameters: {}
      responses: {
        /** The site details with the current values after the edit has occurred. */
        200: {
          schema: definitions['Site']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  /** Get the active theme and theme options for the site. */
  '/site/theme': {
    /** Get the active theme and theme options for the site. */
    get: {
      responses: {
        /** The response will include the theme plugin directory in `themePluginPath`. Any theme options will be provided in additional keys based on the option name. */
        200: {
          schema: definitions['ThemeOptions']
        }
        /** Details about the active theme could not be found. This can occur when the active theme plugin is not installed or enabled. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Get the active theme and theme options for the site. */
    put: {
      parameters: {}
      responses: {
        /** The new theme and values for any of its theme options. */
        200: {
          schema: definitions['ThemeOptions']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  '/announcements': {
    get: {
      parameters: {
        query: {
          /** How many results to return in a single request. */
          count?: unknown
          /** Offset the results returned. Use this to receive subsequent pages of requests. */
          offset?: number
          /** Filter results by a search phrase matched against the `title`, `descriptionShort`, and `description`. */
          searchPhrase?: string
          /** Filter results by announcements of these announcement types. */
          typeIds?: number[]
        }
      }
      responses: {
        /** List of announcements. */
        200: {
          schema: {
            itemsMax?: number
            items?: definitions['AnnouncementSummary'][]
          }
        }
        /** You do not have permission to view announcements in this context. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Create and publish a new announcement in this context. */
    post: {
      parameters: {}
      responses: {
        /** Details of the announcement that was just added. */
        200: {
          schema: definitions['Announcement']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  '/announcements/{announcementId}': {
    get: {
      parameters: {
        path: {
          /** Announcement ID */
          announcementId: number
        }
      }
      responses: {
        /** Announcement details. */
        200: {
          schema: definitions['Announcement']
        }
        /** You do not have permission to view this announcement. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested announcement could not be found. Or you requested an announcement that is not part of this context. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Edit an announcement. */
    put: {
      parameters: {
        path: {
          /** Announcement ID */
          announcementId: number
        }
      }
      responses: {
        /** The announcement that was just edited with the current values after the edit has occurred. */
        200: {
          schema: definitions['Announcement']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** You do not have permission to edit this announcement. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested announcement could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Delete an announcement. */
    delete: {
      parameters: {
        path: {
          /** Announcement ID */
          announcementId: number
        }
      }
      responses: {
        /** Details of the announcement that was just deleted. */
        200: {
          schema: definitions['Announcement']
        }
        /** You do not have permission to delete this announcement. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested announcement could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/emailTemplates': {
    get: {
      parameters: {
        query: {
          /** Filter results by enabled/disabled email templates. Any truthy or falsey value will get enabled/disabled email templates. */
          isEnabled?: string
          /** Filter results by those with or without a default template. A truthy value will return only templates with a key that does not match one of the default templates. A falsey value will return only templates with a key that matches one of the default templates. Note that a default template may be customized, but this does not qualify for `isCustom`. Only completely custom templates, not a customization of a default template, will be returned when `isCustom` is `true`. */
          isCustom?: string
          /** Filter results by email templates sent by one or more role IDs. */
          fromRoleIds?: number[]
          /** Filter results by email templates received by one or more role IDs. */
          toRoleIds?: number[]
          /** Filter results by a search phrase matched against the `key`, `subject`, `body`, or `description`. */
          searchPhrase?: string
          /** Filter results by email templates that belong to one or more workflow stage IDs. Pass `0` to return templates not assigned to a stage. */
          stageIds?: number[]
        }
      }
      responses: {
        /** List of email templates. */
        200: {
          schema: {
            itemsMax?: number
            items?: definitions['EmailTemplateSummary'][]
          }
        }
        /** You do not have permission to view email templates. */
        403: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    post: {
      parameters: {}
      responses: {
        /** Details of the email template that was just added. */
        200: {
          schema: definitions['EmailTemplate']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  /** Email templates are fetched by their key, rather than ID, so that a default template is retrieved if it has not been customized. See the [documentation](https://docs.pkp.sfu.ca/dev/documentation/en/email-templates). */
  '/emailTemplates/{key}': {
    /** Email templates are fetched by their key, rather than ID, so that a default template is retrieved if it has not been customized. See the [documentation](https://docs.pkp.sfu.ca/dev/documentation/en/email-templates). */
    get: {
      parameters: {
        path: {
          /** Email template key */
          key: number
        }
      }
      responses: {
        /** Email template details. */
        200: {
          schema: definitions['EmailTemplate']
        }
        /** You do not have permission to view email templates. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested email template could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    put: {
      parameters: {
        path: {
          /** Email template key */
          key: number
        }
      }
      responses: {
        /** The email template that was just edited with the current values after the edit has occurred. */
        200: {
          schema: definitions['EmailTemplate']
        }
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
        /** There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this email template. 2. You are an admin and you submitted changes for an email template in one context from the API endpoint of another context. To edit an email template, you must make a request to the API endpoint of that email template's context. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested email template could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Default templates that have not been modified can not be deleted. */
    delete: {
      parameters: {
        path: {
          /** Email template key */
          key: number
        }
      }
      responses: {
        /** Details of the email template that was just deleted. */
        200: {
          schema: definitions['EmailTemplate']
        }
        /** You do not have permission to delete this email template. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested email template could not be found. This will be returned if you try to delete a default email template that has not been modified. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/emailTemplates/restoreDefaults': {
    /** Delete custom templates and reset all templates to their default settings. */
    delete: {
      responses: {
        /** A list of template keys which were deleted or reset. */
        200: {
          schema: string[]
        }
      }
    }
  }
  /** Returns information about editorial activity such as the number of submissions accepted and declined, the number of days to reach editorial decisions, and the acceptance and rejection rates. */
  '/stats/editorial': {
    /** Returns information about editorial activity such as the number of submissions accepted and declined, the number of days to reach editorial decisions, and the acceptance and rejection rates. */
    get: {
      parameters: {
        query: {
          /** Return stats after this date. */
          dateStart?: string
          /** Return stats before this date. */
          dateEnd?: string
          /** Filter results by submissions to these sections. */
          sectionIds?: number[]
        }
      }
      responses: {
        /** An array containing the requested stats. The `name` may change with translation but the `key` will be a reliable, unique identifier for the statistic. */
        200: {
          schema: unknown[]
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access editorial statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. This should only occur if the API is requested without specifying the context. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Returns yearly averages of editorial activity. To ensure averages are calculated fairly, partial years are not included in the averages. For example, if the first submission was received in October 2017 and the last submission was received in the current calendar year, only submissions from 2018 up until the end of the previous calendar year will be used to calculate the average. */
  '/stats/editorial/averages': {
    /** Returns yearly averages of editorial activity. To ensure averages are calculated fairly, partial years are not included in the averages. For example, if the first submission was received in October 2017 and the last submission was received in the current calendar year, only submissions from 2018 up until the end of the previous calendar year will be used to calculate the average. */
    get: {
      parameters: {
        query: {
          /** Filter results by submissions to these sections. */
          sectionIds?: number[]
        }
      }
      responses: {
        /** An object containing the requested averages. Each property matches one of the properties from `/stats/editorial`. The value `-1` may be returned for a property if an average can not be calculated. This can occur if there is not a full calendar year of activity to average. */
        200: {
          schema: unknown[]
        }
        /** You do not have permission to access editorial statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. This should only occur if the API is requested without specifying the context. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Returns a list of publications ordered by their total abstract views. Includes total views by abstract, all galleys, PDF galleys, HTML galleys and other galleys. */
  '/stats/publications': {
    /** Returns a list of publications ordered by their total abstract views. Includes total views by abstract, all galleys, PDF galleys, HTML galleys and other galleys. */
    get: {
      parameters: {
        query: {
          /** Return stats for publications after this date. */
          dateStart?: string
          /** Return stats for publications before this date. */
          dateEnd?: string
          /** Filter results by publications in these sections. */
          sectionIds?: string
          /** Filter results by these submissions. */
          submissionIds?: number[]
          /** Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint. */
          searchPhrase?: string
          /** How many publications to return in a single request. Max is `100`. */
          count?: unknown
          /** Offset the publications returned. Use this to receive subsequent pages of requests. */
          offset?: number
          /** Return the results in ascending or descending order. */
          orderDirection?: 'ASC' | 'DESC'
        }
      }
      responses: {
        /** A list of publications with their total stats during the requested period. */
        200: {
          schema: definitions['PublicationStats'][]
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Returns a monthly or daily timeline of abstract views for the publications which match the request parameters. */
  '/stats/publications/abstract': {
    /** Returns a monthly or daily timeline of abstract views for the publications which match the request parameters. */
    get: {
      parameters: {
        query: {
          /** Return the total daily or monthly views */
          timelineInterval?: 'day' | 'month'
          /** Return stats for publications after this date. */
          dateStart?: string
          /** Return stats for publications before this date. */
          dateEnd?: string
          /** Filter results by publications in these sections. */
          sectionIds?: number[]
          /** Filter results by these submissions. */
          submissionIds?: number[]
          /** Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint. */
          searchPhrase?: string
        }
      }
      responses: {
        /** A list of days or months with the total stats for that day or month. */
        200: {
          schema: definitions['TimelineInterval'][]
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Returns a monthly or daily timeline of galley views for the publications which match the request parameters. */
  '/stats/publications/galley': {
    /** Returns a monthly or daily timeline of galley views for the publications which match the request parameters. */
    get: {
      parameters: {
        query: {
          /** Return the total daily or monthly views. */
          timelineInterval?: 'day' | 'month'
          /** Return stats for publications after this date. */
          dateStart?: string
          /** Return stats for publications before this date. */
          dateEnd?: string
          /** Filter results by publications in these sections. */
          sectionIds?: number[]
          /** Filter results by these publications. */
          submissionIds?: number[]
          /** Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint. */
          searchPhrase?: string
        }
      }
      responses: {
        /** A list of days or months with the total stats for that day or month. */
        200: {
          schema: definitions['TimelineInterval'][]
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Returns a publication's total views by abstract, all galleys, PDF galleys, HTML galleys and other galleys. */
  '/stats/publications/{submissionId}': {
    /** Returns a publication's total views by abstract, all galleys, PDF galleys, HTML galleys and other galleys. */
    get: {
      parameters: {
        query: {
          /** Return stats for publications after this date. */
          dateStart?: string
          /** Return stats for publications before this date. */
          dateEnd?: string
        }
      }
      responses: {
        /** The total stats for the publication during the period requested. */
        200: {
          schema: definitions['PublicationStats']
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Returns a monthly or daily timeline of abstract views for the requested publication. */
  '/stats/publications/{submissionId}/abstract': {
    /** Returns a monthly or daily timeline of abstract views for the requested publication. */
    get: {
      parameters: {
        query: {
          /** Return the total daily or monthly views */
          timelineInterval?: 'day' | 'month'
          /** Return stats for publications after this date. */
          dateStart?: string
          /** Return stats for publications before this date. */
          dateEnd?: string
        }
      }
      responses: {
        /** A list of days or months with the total stats for that day or month. */
        200: {
          schema: definitions['TimelineInterval'][]
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Returns a monthly or daily timeline of galley views for the requested publication. */
  '/stats/publications/{submissionId}/galley': {
    /** Returns a monthly or daily timeline of galley views for the requested publication. */
    get: {
      parameters: {
        query: {
          /** Return the total daily or monthly views. */
          timelineInterval?: 'day' | 'month'
          /** Return stats for publications after this date. */
          dateStart?: string
          /** Return stats for publications before this date. */
          dateEnd?: string
        }
      }
      responses: {
        /** A list of days or months with the total stats for that day or month. */
        200: {
          schema: definitions['TimelineInterval'][]
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /**
   * Returns a count of the number of user registrations broken down by roles.
   *
   * Please note when using the `registeredBefore` and `registeredAfter` parameters that role counts reflect current user roles.
   *
   * A user who registered as an author in January, 2019 but was later appointed to subeditor will be counted as a subeditor when the registration date range includes January, 2019.
   */
  '/stats/users': {
    /**
     * Returns a count of the number of user registrations broken down by roles.
     *
     * Please note when using the `registeredBefore` and `registeredAfter` parameters that role counts reflect current user roles.
     *
     * A user who registered as an author in January, 2019 but was later appointed to subeditor will be counted as a subeditor when the registration date range includes January, 2019.
     */
    get: {
      parameters: {
        query: {
          /** Return counts reflecting users who registered after this date. */
          registeredAfter?: string
          /** Return counts reflecting users who registered before this date. */
          registeredBefore?: string
          /** Count `active` or `disabled` users. Default: `active`. */
          status?: 'active' | 'disabled'
        }
      }
      responses: {
        /** An object containing the requested stats. The `id` relects the `ROLE_ID_*` constant in the application. */
        200: {
          schema: unknown[]
        }
        /** Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to access user statistics for this journal or press. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The requested resource was not found. This should only occur if the API is requested without specifying the context. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  '/vocabs': {
    get: {
      parameters: {
        query: {
          /** The type of controlled vocab you want to retrieve entries for. One of `CONTROLLED_VOCAB_*`. */
          vocab: string
          /** The locale key, such as `en_US`, you want to retrieve entries for. If no `locale` is provided, entries will be provided in the user's current locale or fall back to the journal's primary locale. */
          locale?: string
        }
      }
      responses: {
        /** A list of the entries available in this journal. */
        200: {
          schema: string[]
        }
        /** The `locale` that you requested is not supported in this journal. */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** The journal you requested could not be found. */
        404: {
          schema: definitions['ErrorResponse']
        }
      }
    }
  }
  /** Upload a file to the temporary file storage area and receive a temporary file ID. */
  '/temporaryFiles': {
    post: {
      parameters: {
        body: {
          /** Use any parameter key to upload your file. The API endpoint will retrieve the first uploaded file. */
          '...'?: unknown
        }
      }
      responses: {
        /** The temporary file ID to use in other API requests. */
        200: {
          schema: {
            documentType?: string
            id?: number
            mimetype?: string
            name?: string
          }
        }
        /** No uploaded file could be found. */
        400: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Responds with the appopriate headers to indicate file uploads maybe be sent, required by some file upload utilities which send a preflight request. */
    options: {
      responses: {
        /** An empty response body. */
        200: unknown
      }
    }
  }
  /** This endpoint is used on the settings page to save payment plugin settings alongside the general journal settings for enabling payments and setting the currency. */
  '/_payments': {
    put: {
      parameters: {}
      responses: {
        /** The parameters you submitted */
        200: unknown
        /** The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation. */
        400: {
          schema: definitions['InvalidParametersResponse']
        }
      }
    }
  }
  /** The user's public file directory supports files uploaded through the TinyMCE rich text editor. This is commonly used in context settings but is also available to all registered users through their profile biography. */
  '/_uploadPublicFile': {
    post: {
      parameters: {
        body: {
          /** Use the `file` key to upload your file. */
          file?: unknown
        }
      }
      responses: {
        /** An object containing the URL to the uploaded file. */
        200: {
          schema: {
            url?: string
          }
        }
        /**
         * One of the following errors occurred.
         * * No uploaded file could be found.
         * * This file type is not supported.
         * * The file you uploaded identifies itself as an image but it is not a valid image.
         * * The mime-type did not match the file extension.
         * * The file is too large.
         * * The server configuration could not support this file upload because there is no temporary directory, it doesn't have permission to write to the directory, or a PHP extension stopped the file upload.
         *
         * The error message will contain further details.
         */
        400: {
          schema: definitions['ErrorResponse']
        }
        /** You do not have permission to upload this public file. */
        403: {
          schema: definitions['ErrorResponse']
        }
        /** The upload failed for an unknown reason. */
        409: {
          schema: definitions['ErrorResponse']
        }
        /** Your user file directory is full. */
        413: {
          schema: definitions['ErrorResponse']
        }
        /** The server is unable to read or write to the public files directory. */
        500: {
          schema: definitions['ErrorResponse']
        }
      }
    }
    /** Responds with the appopriate headers to indicate file uploads maybe be sent, required by some file upload utilities which send a preflight request. */
    options: {
      responses: {
        /** An empty response body. */
        200: unknown
      }
    }
  }
  /** This endpoint delivers a little bit of extra information about each submission that is used in the submissions list. This private endpoint saves a few extra HTTP requests, but it is more database-intensive for each query. */
  '/_submissions': {
    get: {
      parameters: {}
      responses: {
        /** List of submissions. */
        200: unknown
      }
    }
  }
}

export interface definitions {
  Announcement: 'announcement'
  AnnouncementSummary: unknown
  Author: 'author'
  Context: 'context'
  /** @description A response object that will be returned when the request could not be fulfilled. */
  ErrorResponse: {
    error?: string
    errorMessage?: string
  }
  EmailTemplate: 'emailTemplate'
  Galley: 'galley'
  /**
   * @description A response object that will be returned when there are validation errors for the request parameters. Typically used with forms.
   * @example [object Object]
   */
  InvalidParametersResponse: { [key: string]: unknown }
  Issue: 'issue'
  /**
   * @description Key/value pairs containing data stored by locale key.
   * @example [object Object]
   */
  LocaleObject: { [key: string]: unknown }
  Publication: 'publication'
  /** @description The total abstract and galley views for a published submission. */
  PublicationStats: {
    abstractViews?: number
    galleyViews?: number
    pdfViews?: number
    htmlViews?: number
    otherViews?: number
    publication?: {
      _href?: string
      fullTitle?: definitions['LocaleObject']
      id?: number
      shortAuthorString?: string
      urlPublished?: string
      urlWorkflow?: string
    }
  }
  Contributor: 'author'
  ReviewRound: 'reviewRound'
  /** @description A special representation of a User assigned to a reviewer group. This model presents specific details about review activity. */
  ReviewerSummary: {
    _href?: string
    affiliation?: definitions['LocaleObject']
    averageReviewCompletionDays?: number
    dateLastReviewAssignment?: string
    disabled?: boolean
    fullName?: string
    gossip?: definitions['LocaleObject']
    groups?: definitions['UserGroup'][]
    id?: number
    interests?: definitions['UserInterest'][]
    reviewsActive?: number
    reviewsCompleted?: number
    reviewsCancelled?: number
    reviewsDeclined?: number
    userName?: string
  }
  Section: 'section'
  Site: 'site'
  Submission: 'submission'
  SubmissionFile: 'submissionFile'
  SubmissionSummary: 'submissionSummary'
  /** @description A theme with values for any of its theme options. The theme is provided in the `themePluginPath` key. Other keys may or may not exist depending on what options have been defined by that theme. */
  ThemeOptions: {
    themePluginPath?: string
    '...'?: string
  }
  TimelineInterval: {
    date?: string
    label?: string
    value?: number
  }
  User: 'user'
  UserGroup: 'userGroup'
  /** @description A user's review interests. */
  UserInterest: {
    id?: number
    interest?: string
  }
  UserSummary: 'userSummary'
}

export interface operations {}

export interface external {}
